import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { images, mangaTitle, chapterNumber } = await req.json();
    
    if (!images || images.length === 0) {
      return new Response(
        JSON.stringify({ error: 'Nenhuma imagem fornecida' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY n√£o configurada");
    }

    console.log(`Processando ${images.length} imagens para ${mangaTitle} - Cap√≠tulo ${chapterNumber}`);
    
    // Preparar conte√∫do para o modelo de vis√£o
    const imageNames = images.map((img: { name: string; data: string }) => img.name);
    
    const content = [
      {
        type: "text",
        text: `TAREFA CR√çTICA: ORGANIZAR P√ÅGINAS DE MANHWA/MANGA POR AN√ÅLISE VISUAL

üìñ Obra: ${mangaTitle} - Cap√≠tulo ${chapterNumber}
üî¢ Total de p√°ginas: ${images.length}

‚ö†Ô∏è REGRA #1: IGNORE COMPLETAMENTE OS NOMES DOS ARQUIVOS! 
Analise SOMENTE o conte√∫do visual de cada imagem.

üéØ SEU OBJETIVO:
Organize as p√°ginas na ordem CORRETA de leitura, seguindo a narrativa visual e textual.

üìã COMO IDENTIFICAR A ORDEM:

1Ô∏è‚É£ PRIMEIRA P√ÅGINA (Capa/Abertura):
   ‚úì T√≠tulo grande e centralizado do cap√≠tulo
   ‚úì Arte mais elaborada ou diferenciada
   ‚úì Pode ter logo da obra
   ‚úì Geralmente sem di√°logo ou com texto introdut√≥rio
   ‚úì Cores mais vibrantes ou destaque visual

2Ô∏è‚É£ P√ÅGINAS INTERNAS (Sequ√™ncia narrativa):
   
   CONTINUIDADE DE DI√ÅLOGO:
   ‚Ä¢ Leia os bal√µes de fala em SEQU√äNCIA
   ‚Ä¢ Uma conversa deve fluir naturalmente entre p√°ginas
   ‚Ä¢ Se algu√©m faz uma pergunta, a resposta vem na p√°gina seguinte
   ‚Ä¢ Di√°logos interrompidos continuam na pr√≥xima p√°gina
   
   CONTINUIDADE DE A√á√ÉO:
   ‚Ä¢ Personagem come√ßando um movimento ‚Üí completando o movimento
   ‚Ä¢ Personagem entrando em cena ‚Üí interagindo ‚Üí saindo
   ‚Ä¢ Sequ√™ncia de combate: golpe ‚Üí impacto ‚Üí rea√ß√£o
   ‚Ä¢ Mudan√ßas de express√£o: neutro ‚Üí surpreso ‚Üí reagindo
   
   CONTINUIDADE DE CEN√ÅRIO:
   ‚Ä¢ Mesma localiza√ß√£o deve permanecer agrupada
   ‚Ä¢ Transi√ß√µes visuais: interior ‚Üí exterior, dia ‚Üí noite
   ‚Ä¢ Mudan√ßas de cena devem fazer sentido cronol√≥gico
   
   L√ìGICA TEMPORAL:
   ‚Ä¢ Causa vem antes do efeito
   ‚Ä¢ Prepara√ß√£o antes da a√ß√£o
   ‚Ä¢ A√ß√£o antes da consequ√™ncia

3Ô∏è‚É£ √öLTIMA P√ÅGINA (Fechamento):
   ‚úì Pode ter "FIM", "CONTINUA...", "TO BE CONTINUED"
   ‚úì Cr√©ditos do autor/artista
   ‚úì Preview do pr√≥ximo cap√≠tulo
   ‚úì Cena de conclus√£o/gancho narrativo
   ‚úì Arte de encerramento ou fade out

üîç METODOLOGIA DE AN√ÅLISE:

PASSO 1: Identifique a primeira e √∫ltima p√°gina
PASSO 2: Encontre sequ√™ncias de di√°logo conectadas
PASSO 3: Agrupe p√°ginas por cena/localiza√ß√£o
PASSO 4: Ordene as cenas cronologicamente
PASSO 5: Dentro de cada cena, ordene por fluxo de a√ß√£o
PASSO 6: Verifique se h√° continuidade visual entre todas as transi√ß√µes

üìê DIRE√á√ÉO DE LEITURA:
‚Ä¢ Manhwa (Coreano): Esquerda ‚Üí Direita, Cima ‚Üí Baixo
‚Ä¢ Manga (Japon√™s): Direita ‚Üí Esquerda, Cima ‚Üí Baixo
‚Ä¢ Webtoon vertical: Cima ‚Üí Baixo

‚ùå N√ÉO FA√áA:
‚Ä¢ N√£o se baseie em nomes de arquivo
‚Ä¢ N√£o assuma ordem alfab√©tica
‚Ä¢ N√£o ignore continuidade narrativa
‚Ä¢ N√£o separe p√°ginas de uma mesma cena

‚úÖ SA√çDA OBRIGAT√ìRIA:
Retorne APENAS um JSON v√°lido:
{"order": ["nome_exato_1.webp", "nome_exato_2.webp", ...]}

Use os nomes EXATOS: ${imageNames.join(", ")}

üß† ANALISE CADA IMAGEM CUIDADOSAMENTE E CONSTRUA A NARRATIVA VISUAL COMPLETA!

COMO IDENTIFICAR A ORDEM CORRETA:

1. CAPA (primeira p√°gina):
   - T√≠tulo grande e destacado
   - Arte diferenciada, mais elaborada
   - Logo da obra ou do cap√≠tulo
   - Geralmente tem cores mais vibrantes
   - Pode ter o nome do autor

2. P√ÅGINAS INTERNAS (ordem sequencial):
   - Siga a CONTINUIDADE DA NARRATIVA VISUAL
   - Bal√µes de fala devem formar uma conversa coerente
   - Express√µes dos personagens devem progredir naturalmente
   - A√ß√µes f√≠sicas devem ter sequ√™ncia l√≥gica (ex: pessoa se levantando ‚Üí andando ‚Üí chegando)
   - Mudan√ßas de cen√°rio devem fazer sentido
   - Se houver n√∫meros de p√°gina, use-os apenas como refer√™ncia secund√°ria

3. P√ÅGINA FINAL (√∫ltima p√°gina):
   - Pode ter "FIM", "TO BE CONTINUED", "CONTINUA..."
   - Cr√©ditos do autor/artista
   - Preview do pr√≥ximo cap√≠tulo
   - Cena de fechamento/conclus√£o

INSTRU√á√ïES DE AN√ÅLISE:
- Observe cada imagem CUIDADOSAMENTE
- Identifique personagens e suas posi√ß√µes
- Siga o fluxo da conversa e das a√ß√µes
- A leitura geralmente √© da direita para esquerda (manhwa) ou esquerda para direita (mang√°)
- Procure continuidade visual entre as p√°ginas

FORMATO DE RESPOSTA (OBRIGAT√ìRIO):
Retorne APENAS um JSON v√°lido com os nomes EXATOS dos arquivos:
{"order": ["nome_exato_1.jpg", "nome_exato_2.png", ...]}

Use os nomes EXATAMENTE como foram fornecidos acima. N√ÉO invente novos nomes!`
      },
      ...images.map((img: { name: string; data: string }, index: number) => ({
        type: "text",
        text: `\n--- IMAGEM ${index + 1}: ${img.name} ---`
      })),
      ...images.map((img: { name: string; data: string }) => ({
        type: "image_url",
        image_url: {
          url: img.data
        }
      }))
    ];

    console.log('Enviando para Lovable AI:', images.length, 'imagens');

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-pro",
        messages: [
          {
            role: "user",
            content: content
          }
        ],
        temperature: 0.1 // Baixa temperatura para respostas mais consistentes
      })
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes excedido, tente novamente mais tarde." }), 
          { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes no Lovable AI." }), 
          { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      const errorText = await response.text();
      console.error("Erro da API:", response.status, errorText);
      throw new Error(`Erro da API: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices?.[0]?.message?.content;
    
    console.log('Resposta da IA:', aiResponse);

    // Extrair JSON da resposta
    let parsedOrder;
    try {
      // Tentar encontrar JSON na resposta
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedOrder = JSON.parse(jsonMatch[0]);
      } else {
        parsedOrder = JSON.parse(aiResponse);
      }
      
      // Log para debug
      console.log('Nomes enviados:', imageNames);
      console.log('Nomes retornados pela IA:', parsedOrder.order);
      
      // Verificar se todos os nomes retornados existem nos enviados
      const invalidNames = parsedOrder.order?.filter((name: string) => !imageNames.includes(name)) || [];
      if (invalidNames.length > 0) {
        console.warn('AVISO: IA retornou nomes que n√£o existem:', invalidNames);
      }
      
    } catch (e) {
      console.error('Erro ao parsear resposta da IA:', e);
      return new Response(
        JSON.stringify({ error: 'Erro ao processar resposta da IA', rawResponse: aiResponse }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    return new Response(
      JSON.stringify({ order: parsedOrder.order || images.map((img: any) => img.name) }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Erro na fun√ß√£o sort-manga-pages:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Erro desconhecido' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
