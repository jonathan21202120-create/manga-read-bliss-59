import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { images, mangaTitle, chapterNumber } = await req.json();
    
    if (!images || images.length === 0) {
      return new Response(
        JSON.stringify({ error: 'Nenhuma imagem fornecida' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY n√£o configurada");
    }

    console.log(`Processando ${images.length} imagens para ${mangaTitle} - Cap√≠tulo ${chapterNumber}`);
    
    // Preparar conte√∫do para o modelo de vis√£o
    const imageNames = images.map((img: { name: string; data: string }) => img.name);
    
    // Primeiro: tentar buscar ordem correta online
    console.log('üîç Buscando refer√™ncia online para:', mangaTitle, 'Cap√≠tulo', chapterNumber);
    
    let externalReference = '';
    try {
      const searchResponse = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${LOVABLE_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "google/gemini-2.5-flash",
          messages: [
            {
              role: "user",
              content: `Busque sites de scan/leitura online para a obra "${mangaTitle}" Cap√≠tulo ${chapterNumber}.
              
Retorne APENAS URLs diretas de sites de scan como:
- brmangas.net
- mangayabu.top  
- tsukimangas.com
- mangalivre.net
- unionmangas.top

Formato de resposta:
{
  "urls": ["url1", "url2"],
  "readingOrder": "left-to-right ou right-to-left",
  "notes": "observa√ß√µes sobre a ordem de leitura"
}`
            }
          ],
          temperature: 0.3
        })
      });

      if (searchResponse.ok) {
        const searchData = await searchResponse.json();
        const searchResult = searchData.choices?.[0]?.message?.content;
        console.log('üåê Refer√™ncia externa encontrada:', searchResult);
        externalReference = searchResult || '';
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel buscar refer√™ncia externa:', e);
    }

    const content = [
      {
        type: "text",
        text: `TAREFA CR√çTICA: ORGANIZAR P√ÅGINAS DE MANHWA/MANGA POR AN√ÅLISE VISUAL DETALHADA

üìñ Obra: ${mangaTitle} - Cap√≠tulo ${chapterNumber}
üî¢ Total de p√°ginas: ${images.length}

${externalReference ? `üåê REFER√äNCIA EXTERNA ENCONTRADA:\n${externalReference}\n\n` : ''}

‚ö†Ô∏è INSTRU√á√ïES ABSOLUTAS:
1. IGNORE COMPLETAMENTE OS NOMES DOS ARQUIVOS!
2. Analise PROFUNDAMENTE o conte√∫do visual de CADA imagem
3. Use a refer√™ncia externa acima (se dispon√≠vel) para confirmar a ordem
4. Se n√£o tiver 100% de certeza, indique na resposta

üéØ METODOLOGIA DE AN√ÅLISE (EXECUTE TODOS OS PASSOS):

PASSO 1 - IDENTIFICAR PRIMEIRA P√ÅGINA:
‚úì Procure por t√≠tulo do cap√≠tulo em fonte grande/destacada
‚úì Arte de abertura mais elaborada ou colorida
‚úì Pode ter logo da obra ou n√∫mero do cap√≠tulo
‚úì Geralmente tem menos ou nenhum di√°logo

PASSO 2 - IDENTIFICAR √öLTIMA P√ÅGINA:
‚úì Palavras como "FIM", "CONTINUA", "TO BE CONTINUED", "Pr√≥ximo Cap√≠tulo"
‚úì Cr√©ditos do scan/tradu√ß√£o
‚úì Preview ou arte de encerramento
‚úì Cena de conclus√£o narrativa

PASSO 3 - ANALISAR CONTINUIDADE DE DI√ÅLOGO:
Para CADA p√°gina, leia TODOS os bal√µes de fala e verifique:
‚Ä¢ Uma pergunta em uma p√°gina ‚Üí resposta deve estar na pr√≥xima
‚Ä¢ Conversa interrompida ‚Üí continua√ß√£o na pr√≥xima
‚Ä¢ Personagem falando ‚Üí rea√ß√£o de outro personagem
‚Ä¢ Ordem natural de conversa√ß√£o

PASSO 4 - ANALISAR CONTINUIDADE DE A√á√ÉO:
‚Ä¢ Movimento iniciado ‚Üí movimento completado
‚Ä¢ Personagem olhando para algo ‚Üí mostra o que est√° olhando
‚Ä¢ Ataque/golpe ‚Üí impacto ‚Üí rea√ß√£o
‚Ä¢ Express√£o neutra ‚Üí surpresa ‚Üí resposta emocional
‚Ä¢ Causa ‚Üí efeito (temporal)

PASSO 5 - ANALISAR CONTINUIDADE DE CEN√ÅRIO:
‚Ä¢ Mesma localiza√ß√£o/ambiente deve ficar agrupado
‚Ä¢ Interior ‚Üí exterior (transi√ß√£o l√≥gica)
‚Ä¢ Dia ‚Üí noite (progress√£o temporal)
‚Ä¢ Mudan√ßas de cena devem ter sentido cronol√≥gico

PASSO 6 - DIRE√á√ÉO DE LEITURA:
‚Ä¢ Manhwa (Coreano): Esquerda ‚Üí Direita, Cima ‚Üí Baixo
‚Ä¢ Manga (Japon√™s): Direita ‚Üí Esquerda, Cima ‚Üí Baixo
‚Ä¢ Webtoon: Cima ‚Üí Baixo (vertical cont√≠nuo)

PASSO 7 - VERIFICA√á√ÉO CRUZADA:
‚Ä¢ Compare sua ordem com a refer√™ncia externa (se dispon√≠vel)
‚Ä¢ Verifique se TODAS as transi√ß√µes fazem sentido
‚Ä¢ Releia os di√°logos na ordem proposta
‚Ä¢ Confirme a progress√£o narrativa

‚ùå ERROS QUE VOC√ä NUNCA DEVE COMETER:
‚Ä¢ Usar ordem alfab√©tica ou num√©rica dos nomes de arquivo
‚Ä¢ Separar p√°ginas de uma mesma cena/conversa
‚Ä¢ Inverter causa e efeito
‚Ä¢ Ignorar continuidade de di√°logo
‚Ä¢ Colocar a resposta antes da pergunta

‚úÖ FORMATO DE SA√çDA OBRIGAT√ìRIO:
{
  "order": ["nome_exato_1.webp", "nome_exato_2.webp", ...],
  "confidence": 0.95,
  "reasoning": "Breve explica√ß√£o da ordem: primeira p√°gina identificada por [raz√£o], sequ√™ncia de di√°logo [descri√ß√£o], √∫ltima p√°gina com [indicador]"
}

üìã NOMES EXATOS DAS IMAGENS: ${imageNames.join(", ")}

üß† ANALISE CADA IMAGEM INDIVIDUALMENTE, COMPARE TODAS ENTRE SI, E CONSTRUA A SEQU√äNCIA NARRATIVA PERFEITA!`
      },
      ...images.map((img: { name: string; data: string }, index: number) => ({
        type: "text",
        text: `\n--- IMAGEM ${index + 1}: ${img.name} ---\nAn√°lise necess√°ria: di√°logo, a√ß√£o, cen√°rio, posi√ß√£o narrativa`
      })),
      ...images.map((img: { name: string; data: string }) => ({
        type: "image_url",
        image_url: {
          url: img.data
        }
      }))
    ];

    console.log('Enviando para Lovable AI:', images.length, 'imagens');

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-pro",
        messages: [
          {
            role: "user",
            content: content
          }
        ],
        temperature: 0.1 // Baixa temperatura para respostas mais consistentes
      })
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Limite de requisi√ß√µes excedido, tente novamente mais tarde." }), 
          { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Cr√©ditos insuficientes no Lovable AI." }), 
          { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      const errorText = await response.text();
      console.error("Erro da API:", response.status, errorText);
      throw new Error(`Erro da API: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices?.[0]?.message?.content;
    
    console.log('üìä Resposta da IA:', aiResponse);

    // Extrair JSON da resposta
    let parsedOrder;
    try {
      // Tentar encontrar JSON na resposta
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedOrder = JSON.parse(jsonMatch[0]);
      } else {
        parsedOrder = JSON.parse(aiResponse);
      }
      
      // Log detalhado para debug
      console.log('üìù Nomes enviados:', imageNames);
      console.log('üìù Nomes retornados pela IA:', parsedOrder.order);
      console.log('üéØ Confian√ßa da IA:', parsedOrder.confidence || 'n√£o informada');
      console.log('üí≠ Racioc√≠nio:', parsedOrder.reasoning || 'n√£o informado');
      
      // Verificar se todos os nomes retornados existem nos enviados
      const invalidNames = parsedOrder.order?.filter((name: string) => !imageNames.includes(name)) || [];
      if (invalidNames.length > 0) {
        console.error('‚ùå ERRO: IA retornou nomes inv√°lidos:', invalidNames);
        return new Response(
          JSON.stringify({ 
            error: 'IA retornou nomes de arquivo inv√°lidos',
            invalidNames,
            validNames: imageNames 
          }), 
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      // Verificar se todos os nomes originais est√£o na resposta
      const missingNames = imageNames.filter((name: string) => !parsedOrder.order?.includes(name)) || [];
      if (missingNames.length > 0) {
        console.error('‚ùå ERRO: IA n√£o incluiu todas as imagens:', missingNames);
        return new Response(
          JSON.stringify({ 
            error: 'IA n√£o incluiu todas as imagens na ordena√ß√£o',
            missingNames 
          }), 
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      // Verificar confian√ßa
      const confidence = parsedOrder.confidence || 0;
      if (confidence < 0.7) {
        console.warn('‚ö†Ô∏è AVISO: Confian√ßa baixa na ordena√ß√£o:', confidence);
      }
      
    } catch (e) {
      console.error('‚ùå Erro ao parsear resposta da IA:', e);
      return new Response(
        JSON.stringify({ error: 'Erro ao processar resposta da IA', rawResponse: aiResponse }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('‚úÖ Ordena√ß√£o conclu√≠da com sucesso');
    return new Response(
      JSON.stringify({ 
        order: parsedOrder.order,
        confidence: parsedOrder.confidence,
        reasoning: parsedOrder.reasoning
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Erro na fun√ß√£o sort-manga-pages:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Erro desconhecido' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
