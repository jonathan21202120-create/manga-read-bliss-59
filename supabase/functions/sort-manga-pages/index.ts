import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { images, mangaTitle, chapterNumber } = await req.json();
    console.log(`\n${'='.repeat(70)}`);
    console.log(`üìö DUAL-AI SORTING SYSTEM`);
    console.log(`üìñ Obra: ${mangaTitle} | Cap√≠tulo: ${chapterNumber}`);
    console.log(`üìä Total de p√°ginas: ${images?.length || 0}`);
    console.log(`${'='.repeat(70)}\n`);

    if (!images || images.length === 0) {
      return new Response(
        JSON.stringify({ error: 'Nenhuma imagem fornecida' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!LOVABLE_API_KEY) {
      console.error('‚ùå LOVABLE_API_KEY n√£o configurada');
      return new Response(
        JSON.stringify({ error: 'Servi√ßo de IA n√£o configurado' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Extrair nomes dos arquivos
    const imageNames = images.map((img: { name: string; data: string }) => img.name);
    console.log('üìã Arquivos recebidos:', imageNames);

    // ========================================
    // üé® STAGE 1: VISUAL ANALYSIS AI
    // ========================================
    console.log('\nüé® STAGE 1: Visual Analysis AI');
    console.log('‚îÄ'.repeat(70));
    console.log('Analisando conte√∫do visual individual de cada p√°gina...\n');

    const visualAnalysisPrompt = `Voc√™ √© uma IA ESPECIALIZADA em an√°lise visual de manga/manhwa.

**SUA TAREFA**: Analise cada uma das ${images.length} imagens fornecidas individualmente e extraia informa√ß√µes visuais DETALHADAS.

Para cada imagem, identifique:

1. **Tipo de p√°gina**:
   - "opening" = P√°gina de abertura (t√≠tulo do cap√≠tulo, arte elaborada, logo)
   - "closing" = P√°gina de encerramento ("FIM", "CONTINUA", cr√©ditos)
   - "content" = P√°gina de conte√∫do normal

2. **Personagens presentes**: Descreva os personagens vis√≠veis (ex: "homem de cabelo preto", "mulher de vestido branco")

3. **Localiza√ß√£o**: Onde se passa a cena (ex: "quarto escuro", "corredor iluminado", "floresta", "rua da cidade")

4. **A√ß√£o principal**: O que est√° acontecendo visualmente (ex: "personagem correndo", "dois personagens conversando", "cena de luta")

5. **Di√°logos e textos**:
   - Existem bal√µes de fala? (sim/n√£o)
   - Se sim, transcreva EXATAMENTE o texto vis√≠vel
   - Identifique o tipo: "pergunta", "resposta", "exclama√ß√£o", "pensamento", "narra√ß√£o"
   - Posi√ß√£o dos bal√µes: "topo", "meio", "baixo"

6. **Elementos visuais √∫nicos**: Qualquer coisa marcante (efeitos de a√ß√£o, flashbacks, mudan√ßa de tom, s√≠mbolos especiais)

7. **Tom emocional**: "calmo", "tenso", "dram√°tico", "c√¥mico", "a√ß√£o intensa", etc.

**FORMATO DE RESPOSTA** (JSON):
{
  "analyses": [
    {
      "filename": "nome-do-arquivo.webp",
      "pageType": "opening|content|closing",
      "characters": ["descri√ß√£o personagem 1", "descri√ß√£o personagem 2"],
      "location": "descri√ß√£o do local",
      "action": "descri√ß√£o da a√ß√£o",
      "dialogue": {
        "present": true/false,
        "texts": ["texto 1", "texto 2"],
        "type": "pergunta|resposta|exclama√ß√£o|pensamento|narra√ß√£o",
        "position": "topo|meio|baixo"
      },
      "visualMarkers": "elementos √∫nicos",
      "tone": "tom emocional"
    }
  ]
}

**REGRAS CR√çTICAS**:
- N√ÉO tente ordenar as p√°ginas ainda
- N√ÉO use os nomes de arquivo como guia (s√£o hashes aleat√≥rios)
- Analise SOMENTE o conte√∫do visual
- Seja EXTREMAMENTE detalhado nos di√°logos
- Retorne o JSON v√°lido

NOMES DOS ARQUIVOS (para refer√™ncia):
${imageNames.map((name, i) => `${i + 1}. ${name}`).join('\n')}`;

    const visualAnalysisMessages = [{
      role: 'user',
      content: [
        { type: 'text', text: visualAnalysisPrompt },
        ...images.map((img: { name: string; data: string }) => ({
          type: 'image_url',
          image_url: { url: img.data }
        }))
      ]
    }];

    const visualResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-pro',
        messages: visualAnalysisMessages,
        temperature: 0.2
      })
    });

    if (!visualResponse.ok) {
      const errorText = await visualResponse.text();
      console.error('‚ùå Visual Analysis AI falhou:', errorText);
      throw new Error('An√°lise visual falhou');
    }

    const visualData = await visualResponse.json();
    const visualContent = visualData.choices?.[0]?.message?.content || '';
    
    // Extrair JSON da resposta
    const jsonMatch = visualContent.match(/\{[\s\S]*\}/);
    const visualAnalysis = jsonMatch ? JSON.parse(jsonMatch[0]) : JSON.parse(visualContent);
    
    console.log('‚úÖ An√°lise visual conclu√≠da');
    console.log(`üìä ${visualAnalysis.analyses?.length || 0} p√°ginas analisadas`);
    
    // Log resumido
    visualAnalysis.analyses?.forEach((analysis: any, i: number) => {
      console.log(`  ${i + 1}. ${analysis.filename}: [${analysis.pageType}] ${analysis.action}`);
    });

    // ========================================
    // üìñ STAGE 2: NARRATIVE ORDERING AI
    // ========================================
    console.log('\nüìñ STAGE 2: Narrative Ordering AI');
    console.log('‚îÄ'.repeat(70));
    console.log('Determinando sequ√™ncia narrativa correta...\n');

    const narrativePrompt = `Voc√™ √© uma IA ESPECIALIZADA em sequenciamento narrativo de manga/manhwa.

**INFORMA√á√ïES DA OBRA**:
üìñ T√≠tulo: "${mangaTitle}"
üìó Cap√≠tulo: ${chapterNumber}
üìä Total de p√°ginas: ${images.length}

**DADOS DA AN√ÅLISE VISUAL** (feita por outra IA):
${JSON.stringify(visualAnalysis, null, 2)}

**SUA TAREFA CR√çTICA**:
Use os dados de an√°lise visual + as imagens fornecidas para determinar a ordem CORRETA de leitura.

**METODOLOGIA OBRIGAT√ìRIA**:

1Ô∏è‚É£ **IDENTIFICAR PRIMEIRA P√ÅGINA**:
   - Procure por: t√≠tulo do cap√≠tulo, arte de abertura, logo, n√∫mero do cap√≠tulo
   - pageType: "opening" √© forte indicador
   - Geralmente tem pouco ou nenhum di√°logo

2Ô∏è‚É£ **IDENTIFICAR √öLTIMA P√ÅGINA**:
   - Procure por: "FIM", "CONTINUA", "TO BE CONTINUED", cr√©ditos
   - pageType: "closing" √© forte indicador
   - Pode ter preview do pr√≥ximo cap√≠tulo

3Ô∏è‚É£ **ORGANIZAR P√ÅGINAS INTERMEDI√ÅRIAS**:
   
   A. **CONTINUIDADE DE DI√ÅLOGO** (prioridade m√°xima):
      - Perguntas DEVEM vir antes de respostas
      - Di√°logos incompletos devem continuar na pr√≥xima p√°gina
      - Conversas entre personagens devem fluir naturalmente
      
      Exemplo correto:
        P√°gina A: "O que voc√™ est√° fazendo aqui?"
        P√°gina B: "Vim te salvar!"
   
   B. **CONTINUIDADE DE A√á√ÉO**:
      - A√ß√µes devem progredir temporalmente: prepara√ß√£o ‚Üí execu√ß√£o ‚Üí resultado
      - Causa deve vir antes do efeito
      
      Exemplo correto:
        P√°gina A: [personagem prepara soco]
        P√°gina B: [soco em movimento]
        P√°gina C: [impacto no alvo]
   
   C. **CONTINUIDADE DE CEN√ÅRIO**:
      - Mantenha cenas no mesmo local juntas
      - Transi√ß√µes devem ser l√≥gicas: quarto ‚Üí corredor ‚Üí sala
      - Progress√£o temporal: dia ‚Üí tarde ‚Üí noite

4Ô∏è‚É£ **VALIDA√á√ÉO CRUZADA**:
   - Verifique se todos os di√°logos fazem sentido na ordem escolhida
   - Confirme que a√ß√µes t√™m progress√£o l√≥gica
   - Garanta que n√£o h√° saltos temporais estranhos

**C√ÅLCULO DE CONFIAN√áA**:
- **0.95-1.0**: Certeza absoluta, todas as transi√ß√µes perfeitas, primeira/√∫ltima claras
- **0.85-0.94**: Muito confiante, pequenas ambiguidades resolvidas
- **0.70-0.84**: Confiante, mas com incertezas em 1-2 p√°ginas
- **0.50-0.69**: M√∫ltiplas ordens poss√≠veis, escolhi a mais prov√°vel
- **< 0.50**: N√£o consigo determinar ordem correta com confian√ßa

**DETERMINA√á√ÉO DE STATUS**:
- Se confidence >= 0.85: "‚úÖ Sequ√™ncia coerente"
- Se confidence 0.70-0.84: "‚ö†Ô∏è Necessita reordena√ß√£o"
- Se confidence < 0.70: "‚ùå Falha de contexto ‚Äî mesclar inst√¢ncias novamente"

**FORMATO DE RESPOSTA** (JSON v√°lido):
{
  "order": ["arquivo1.webp", "arquivo2.webp", "arquivo3.webp", ...],
  "confidence": 0.95,
  "status": "‚úÖ Sequ√™ncia coerente",
  "reasoning": "Explica√ß√£o DETALHADA: Como identifiquei primeira p√°gina (ex: t√≠tulo em destaque), como organizei o meio (ex: seguindo di√°logo entre personagem A e B, depois transi√ß√£o para cena de a√ß√£o), como identifiquei √∫ltima p√°gina (ex: cr√©ditos de tradu√ß√£o)",
  "warnings": ["qualquer ambiguidade ou incerteza encontrada"]
}

**REGRAS ABSOLUTAS**:
üö´ NUNCA ordene por nome de arquivo (s√£o hashes aleat√≥rios!)
üö´ NUNCA coloque resposta antes de pergunta
üö´ NUNCA inverta causa e efeito
üö´ NUNCA separe p√°ginas da mesma conversa
‚úÖ SEMPRE baseie na an√°lise visual + conte√∫do das imagens
‚úÖ SEMPRE valide que di√°logos fazem sentido na ordem
‚úÖ SEMPRE explique seu racioc√≠nio detalhadamente

ARQUIVOS DISPON√çVEIS (ordem atual, provavelmente INCORRETA):
${imageNames.map((name, i) => `${i + 1}. ${name}`).join('\n')}

Agora analise as imagens e retorne a ordem correta!`;

    const narrativeMessages = [{
      role: 'user',
      content: [
        { type: 'text', text: narrativePrompt },
        ...images.map((img: { name: string; data: string }) => ({
          type: 'image_url',
          image_url: { url: img.data }
        }))
      ]
    }];

    const narrativeResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-pro',
        messages: narrativeMessages,
        temperature: 0.1
      })
    });

    if (!narrativeResponse.ok) {
      const errorText = await narrativeResponse.text();
      console.error('‚ùå Narrative Ordering AI falhou:', errorText);
      throw new Error('Ordena√ß√£o narrativa falhou');
    }

    const narrativeData = await narrativeResponse.json();
    const narrativeContent = narrativeData.choices?.[0]?.message?.content || '';
    
    // Extrair JSON
    const narrativeJsonMatch = narrativeContent.match(/\{[\s\S]*\}/);
    const result = narrativeJsonMatch ? JSON.parse(narrativeJsonMatch[0]) : JSON.parse(narrativeContent);

    console.log('\n' + '='.repeat(70));
    console.log('üìä RESULTADO FINAL DO DUAL-AI SYSTEM');
    console.log('='.repeat(70));
    console.log(`üéØ Status: ${result.status}`);
    console.log(`üìà Confian√ßa: ${(result.confidence * 100).toFixed(1)}%`);
    console.log(`üí≠ Racioc√≠nio: ${result.reasoning}`);
    if (result.warnings?.length > 0) {
      console.log(`‚ö†Ô∏è  Avisos: ${result.warnings.join(', ')}`);
    }
    console.log('\nüìã Ordem determinada:');
    result.order?.forEach((filename: string, i: number) => {
      console.log(`  ${i + 1}. ${filename}`);
    });
    console.log('='.repeat(70) + '\n');

    // Valida√ß√£o
    const invalidNames = result.order?.filter((name: string) => !imageNames.includes(name)) || [];
    if (invalidNames.length > 0) {
      console.error('‚ùå ERRO: IA retornou nomes inv√°lidos:', invalidNames);
      return new Response(
        JSON.stringify({
          error: 'IA retornou nomes de arquivo inv√°lidos',
          invalidNames,
          validNames: imageNames
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const missingNames = imageNames.filter((name: string) => !result.order?.includes(name)) || [];
    if (missingNames.length > 0) {
      console.error('‚ùå ERRO: IA n√£o incluiu todas as imagens:', missingNames);
      return new Response(
        JSON.stringify({
          error: 'IA n√£o incluiu todas as imagens na ordem',
          missingNames,
          returnedNames: result.order
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    return new Response(
      JSON.stringify({
        order: result.order,
        confidence: result.confidence,
        status: result.status,
        reasoning: result.reasoning,
        warnings: result.warnings || []
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Erro fatal:', error);
    return new Response(
      JSON.stringify({
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        status: '‚ùå Falha de contexto ‚Äî mesclar inst√¢ncias novamente'
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
